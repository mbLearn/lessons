### Selenium 2.0 Documentation 
http://selenium.googlecode.com/svn/trunk/docs/api/py/index.html

### 0
### Example
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.keys import Keys
import time

browser = webdriver.Firefox() # Get local session of firefox
browser.get("http://www.yahoo.com") # Load page
assert "Yahoo!" in browser.title
elem = browser.find_element_by_name("p") # Find the query box
elem.send_keys("seleniumhq" + Keys.RETURN)
time.sleep(0.2) # Let the page load, will be added to the API
try:
    browser.find_element_by_xpath("//a[contains(@href,'http://seleniumhq.org')]")
except NoSuchElementException:
    assert 0, "can't find seleniumhq"
browser.close()

################################################################################################
####################     -- My Selenium Journey -- Codes that I use  --    #####################

from selenium import webdriver
from selenium.webdriver.support.ui import Select

# navigate to the page
b = webdriver.Firefox()


### 1 
### Pick option from drop down (<select>)
### import the Select Module ###
select = Select(b.find_element_by_id(....))
print select.options
print [o.text for o in select.options] # these are string-s
select.select_by_visible_text(....)
(#select.select_by_value(....), #select.select_by_index(....))

### 1a
### As comapred to ###1 this is little fater ###
def fast_multiselect(driver, element_id, labels):
	select = Select(driver.find_element_by_id(element_id))
	for label in labels:
		select.select_by_visible_text(label)

### 2		
### Upload a file 

@step('Select upload file "([^"]+)", "([^"]*)"')
def att_file(step, fname, buttonID, textareaID):
    # hacky:  Selenium can't find the uploadFile element if it's hidden, so we need to unhideit
    data_fname = os.path.normpath(os.path.dirname(__file__) + "/../" + fname)
    get_driver().execute_script("$('#%s').removeClass('hide').removeClass('hidden')"% buttonID)
    get_driver().find_element_by_id(buttonID).send_keys(data_fname)
    time.sleep(1)	
		
		
(Example for ###2 - I am trying to automate uploading an image. 
					The uploader is a Flash object and using AutoIt is not an option. 
					So I am trying to work my way around this with just webdriver. 
					The idea is to 'set' the value attribute of the image uploader with 
					a link pointing to an image saved on the server. 
					My question is, is there a method to set the attribute of 
					an element in webdriver? I know there is one to get value (get_attribute) . 
					I am using python + webdriver.)		
#i		
get_driver().execute_script("document.getElementById('allImages').value = '../uploads/image_example.jpg';")

#ii
image = get_driver().find_element_by_id("allImages")
get_driver().execute_script("arguments[0].value = 'foo.jpg';", image) 
		
		
### 3
### How take-a-screenshot-with-selenium-webdriver?		

browser = webdriver.Firefox()
browser.get('http://www.google.com/')
browser.save_screenshot('./screenie.png')
browser.quit()
		
### 4
### Download file using selenium webdriver
import os
from selenium import webdriver

//common to all the cases
prof = webdriver.FirefoxProfile()

//Case:1 - Use this case to set download this code to your browser's default location
//prof.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/zip");

//Case:2 - Download file to Desktop
//prof.setPreference("browser.download.folderList", 0);
//prof.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/zip");

//Case:3 - Download to custom folder path. Replace d:\\selenium with your Download Location 
prof.setPreference("browser.download.dir","D:\\selenium\\");
prof.setPreference("browser.download.folderList", 2);
prof.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/zip");


browser = webdriver.Firefox(firefox_profile=fp)
browser.get("http://pypi.python.org/pypi/selenium")
browser.find_element_by_partial_link_text("selenium-2").click()


		
		
### Interesting Scenario ###
Iterate through each client (take a screenshot) then subpages (take a screenshot)
for example :-
    Take/save screenshot
    Go to client1/subpage1
    Take/save screenshot
    Go to client1/subpage2
    Take/save screenshot
    Go to client2
    Take/save screenshot
    Go to client2/subpage1
    Take/save screenshot
and so on....
Then, after that is done in, say in Firefox, do it again in Chrome.

### make a list for everything you want to loop over ###
browsers = [
    'chrome'
    ,'firefox'
    ]

client_urls = [
    'www.client1.com'
    ,'www.client2.com'
    ]

sub_pages = [
    '/subpage1'
    ,'/subpage2'
    ]

#create a list of all clients and pages
complete_urls = [client_url + sub_page for client_url in client_urls for sub_page in sub_pages] 

#check that list in each browser
for browser in browsers:
    #insert your code for creating a new webdriver for the given browser
    for complete_url in complete_urls:
        driver.get(complete_url)
        driver.get_screenshot_as_file()

	